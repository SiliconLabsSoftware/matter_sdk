name: "Unit Test Validator"

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  validate-tests:
    runs-on: ubuntu-latest

    steps:
      - name: "Checkout code"
        uses: actions/checkout@v3

      - name: "Set up Python"
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: "Install dependencies"
        run: pip install requests

      - name: "Fetch PR Diff using GitHub REST API"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          REPO=${{ github.repository }}
          curl -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/$REPO/pulls/$PR_NUMBER/files" > pr_diff.json

          echo "=== PR Diff JSON Response ==="
          cat pr_diff.json

      - name: "Filter C/C++ files"
        run: |
          # Filter C/C++ files from the PR diff
          jq -r '.[] | select(.filename | test("\\.(c|cpp|cc|cxx|h|hpp|hxx)$")) | .filename' pr_diff.json > cpp_files.txt

          echo "C/C++ files changed in this PR:"
          cat cpp_files.txt

      - name: "Calculate total changes and determine coverage requirement"
        run: |
          # Calculate total lines added for C/C++ files
          TOTAL_CHANGES=$(jq -r '.[] | select(.filename | test("\\.(c|cpp|cc|cxx|h|hpp|hxx)$")) | (.additions)' pr_diff.json | awk '{sum += $1} END {print sum}')

          # Handle case when no C/C++ files are found
          if [ -z "$TOTAL_CHANGES" ] || [ "$TOTAL_CHANGES" = "0" ]; then
            echo "No C/C++ files changed in this PR"
            exit 0
          fi

          echo "=== PR Change Summary ==="
          echo "Total lines added in C/C++ files: $TOTAL_CHANGES"

          # Determine required code coverage based on number of changes
          if [ "$TOTAL_CHANGES" -le 10 ]; then
            REQUIRED_COVERAGE=90
            echo "Changes are minimal (â‰¤10 lines)"
          else
            REQUIRED_COVERAGE=100
            echo "Changes are significant (>10 lines)"
          fi

          echo "Required code coverage: ${REQUIRED_COVERAGE}%"

          # Store values in environment for future steps
          echo "TOTAL_CHANGES=$TOTAL_CHANGES" >> $GITHUB_ENV
          echo "REQUIRED_COVERAGE=$REQUIRED_COVERAGE" >> $GITHUB_ENV

          # Print detailed breakdown
          echo ""
          echo "=== Detailed File Changes ==="
          jq -r '.[] | select(.filename | test("\\.(c|cpp|cc|cxx|h|hpp|hxx)$")) | "File: \(.filename) | Additions: \(.additions) | Deletions: \(.deletions) | Total: \(.additions + .deletions)"' pr_diff.json

      - name: "Find Existing GTest Unit Tests"
        run: |
          echo "=== Finding Existing GTest Unit Tests ==="

          # Read modified C/C++ files into array
          declare -a modified_files
          while IFS= read -r file; do
            if [ -n "$file" ]; then
              modified_files+=("$file")
            fi
          done < cpp_files.txt

          echo "Modified C/C++ files: ${#modified_files[@]}"

          # Find all GTest files recursively from src/app/tests
          if [ -d "src/app/tests" ]; then
            echo "Searching for GTest files in src/app/tests..."
            
            # Find test files containing gtest patterns
            find src/app/tests -type f \( -name "*.cpp" -o -name "*.cc" -o -name "*.cxx" \) -exec grep -l "TEST\|EXPECT_\|ASSERT_" {} \; > found_test_files.txt 2>/dev/null
            
            test_file_count=$(wc -l < found_test_files.txt 2>/dev/null || echo "0")
            echo "Total GTest files found: $test_file_count"
            
            # Map modified files to test files
            files_with_tests=0
            > file_test_mapping.txt
            
            for modified_file in "${modified_files[@]}"; do
              base_name=$(basename "$modified_file" | sed 's/\.[^.]*$//')
              
              # Look for test files that might test this file
              matching_tests=$(grep -i "${base_name}" found_test_files.txt 2>/dev/null || true)
              
              # Look for includes of the modified file in test files
              include_tests=""
              if [ -f "$modified_file" ]; then
                include_name=$(basename "$modified_file")
                include_tests=$(find src/app/tests -type f \( -name "*.cpp" -o -name "*.cc" -o -name "*.cxx" \) -exec grep -l "#include.*${include_name}" {} \; 2>/dev/null || true)
              fi
              
              # Combine results
              all_tests=$(echo -e "$matching_tests\n$include_tests" | sort -u | grep -v '^$' || true)
              
              if [ -n "$all_tests" ]; then
                files_with_tests=$((files_with_tests + 1))
                echo "$modified_file:$all_tests" >> file_test_mapping.txt
              else
                echo "$modified_file:" >> file_test_mapping.txt
              fi
            done
            
            echo "Files with existing tests: $files_with_tests out of ${#modified_files[@]}"
            
          else
            echo "src/app/tests directory not found"
            touch found_test_files.txt
            touch file_test_mapping.txt
          fi

      # Add your analysis and test steps here, e.g.:
      # - name: "Run Unit Test Validator"
      #   run: python your_script.py pr_diff.json
